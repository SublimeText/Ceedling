{
    "completions": [
        {
            "contents": "TEST_FAIL_MESSAGE(\"${1:message}\");",
            "trigger": "fam\tfail message"
        },
        {
            "contents": "TEST_FAIL();",
            "trigger": "fa\tfail"
        },
        {
            "contents": "TEST_IGNORE_MESSAGE(\"${1:message}\");",
            "trigger": "igm\tignore message"
        },
        {
            "contents": "TEST_IGNORE();",
            "trigger": "ig\tignore"
        },
        {
            "contents": "TEST_MESSAGE(\"${1:message}\");",
            "trigger": "me\tmessage"
        },
        {
            "contents": "TEST_ONLY();",
            "trigger": "on\tonly"
        },
        {
            "contents": "TEST_PASS();",
            "trigger": "pa\tpass"
        },
        {
            "contents": "TEST_PASS_MESSAGE(\"${1:message}\");",
            "trigger": "pam\tpass message"
        },
        {
            "contents": "TEST_FILE(${1:a});",
            "trigger": "fi\tfile"
        },
        {
            "contents": "TEST_ASSERT(${1:condition});",
            "trigger": "as\tassert"
        },
        {
            "contents": "TEST_ASSERT_TRUE(${1:condition});",
            "trigger": "at\tassert true"
        },
        {
            "contents": "TEST_ASSERT_UNLESS(${1:condition});",
            "trigger": "au\tassert unless"
        },
        {
            "contents": "TEST_ASSERT_FALSE(${1:condition});",
            "trigger": "af\tassert false"
        },
        {
            "contents": "TEST_ASSERT_NULL(${1:pointer});",
            "trigger": "an\tassert null"
        },
        {
            "contents": "TEST_ASSERT_NOT_NULL(${1:pointer});",
            "trigger": "ann\tassert not null"
        },
        {
            "contents": "TEST_ASSERT_EMPTY(${1:pointer});",
            "trigger": "ae\tassert empty"
        },
        {
            "contents": "TEST_ASSERT_NOT_EMPTY(${1:pointer});",
            "trigger": "ane\tassert not empty"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT(${1:expected}, ${2:actual});",
            "trigger": "aei\tassert equal int"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT8(${1:expected}, ${2:actual});",
            "trigger": "aei8\tassert equal int8"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT16(${1:expected}, ${2:actual});",
            "trigger": "aei16\tassert equal int16"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT32(${1:expected}, ${2:actual});",
            "trigger": "aei32\tassert equal int32"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT64(${1:expected}, ${2:actual});",
            "trigger": "aei64\tassert equal int64"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT(${1:expected}, ${2:actual});",
            "trigger": "aeu\tassert equal uint"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT8(${1:expected}, ${2:actual});",
            "trigger": "aeu8\tassert equal uint8"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT16(${1:expected}, ${2:actual});",
            "trigger": "aeu16\tassert equal uint16"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT32(${1:expected}, ${2:actual});",
            "trigger": "aeu32\tassert equal uint32"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT64(${1:expected}, ${2:actual});",
            "trigger": "aeu64\tassert equal uint64"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_size_t(${1:expected}, ${2:actual});",
            "trigger": "aesz\tassert equal size_t"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX(${1:expected}, ${2:actual});",
            "trigger": "aeh\tassert equal hex"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX8(${1:expected}, ${2:actual});",
            "trigger": "aeh8\tassert equal hex8"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX16(${1:expected}, ${2:actual});",
            "trigger": "aeh16\tassert equal hex16"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX32(${1:expected}, ${2:actual});",
            "trigger": "aeh32\tassert equal hex32"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX64(${1:expected}, ${2:actual});",
            "trigger": "aeh64\tassert equal hex64"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_CHAR(${1:expected}, ${2:actual});",
            "trigger": "aec\tassert equal char"
        },
        {
            "contents": "TEST_ASSERT_BITS(${1:mask}, ${2:expected}, ${3:actual});",
            "trigger": "ab\tassert bits"
        },
        {
            "contents": "TEST_ASSERT_BITS_HIGH(${1:mask}, ${2:actual});",
            "trigger": "abh\tassert bits high"
        },
        {
            "contents": "TEST_ASSERT_BITS_LOW(${1:mask}, ${2:actual});",
            "trigger": "abl\tassert bits low"
        },
        {
            "contents": "TEST_ASSERT_BIT_HIGH(${1:bit}, ${2:actual});",
            "trigger": "abh\tassert bit high"
        },
        {
            "contents": "TEST_ASSERT_BIT_LOW(${1:bit}, ${2:actual});",
            "trigger": "abl\tassert bit low"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT(${1:threshold}, ${2:actual});",
            "trigger": "anei\tassert not equal int"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT8(${1:threshold}, ${2:actual});",
            "trigger": "anei8\tassert not equal int8"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT16(${1:threshold}, ${2:actual});",
            "trigger": "anei16\tassert not equal int16"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT32(${1:threshold}, ${2:actual});",
            "trigger": "anei32\tassert not equal int32"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT64(${1:threshold}, ${2:actual});",
            "trigger": "anei64\tassert not equal int64"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT(${1:threshold}, ${2:actual});",
            "trigger": "aneu\tassert not equal uint"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "aneu8\tassert not equal uint8"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "aneu16\tassert not equal uint16"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "aneu32\tassert not equal uint32"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "aneu64\tassert not equal uint64"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_size_t(${1:threshold}, ${2:actual});",
            "trigger": "anesz\tassert not equal size_t"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "aneh8\tassert not equal hex8"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "aneh16\tassert not equal hex16"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "aneh32\tassert not equal hex32"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "aneh64\tassert not equal hex64"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "anec\tassert not equal char"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN(${1:threshold}, ${2:actual});",
            "trigger": "agt\tassert greater than"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT(${1:threshold}, ${2:actual});",
            "trigger": "agti\tassert greater than int"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT8(${1:threshold}, ${2:actual});",
            "trigger": "agti8\tassert greater than int8"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT16(${1:threshold}, ${2:actual});",
            "trigger": "agti16\tassert greater than int16"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT32(${1:threshold}, ${2:actual});",
            "trigger": "agti32\tassert greater than int32"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT64(${1:threshold}, ${2:actual});",
            "trigger": "agti64\tassert greater than int64"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT(${1:threshold}, ${2:actual});",
            "trigger": "agtu\tassert greater than uint"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "agtu8\tassert greater than uint8"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "agtu16\tassert greater than uint16"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "agtu32\tassert greater than uint32"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "agtu64\tassert greater than uint64"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_size_t(${1:threshold}, ${2:actual});",
            "trigger": "agtsz\tassert greater than size_t"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "agth8\tassert greater than hex8"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "agth16\tassert greater than hex16"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "agth32\tassert greater than hex32"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "agth64\tassert greater than hex64"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "agtc\tassert greater than char"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN(${1:threshold}, ${2:actual});",
            "trigger": "alt\tassert less than"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT(${1:threshold}, ${2:actual});",
            "trigger": "alti\tassert less than int"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT8(${1:threshold}, ${2:actual});",
            "trigger": "alti8\tassert less than int8"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT16(${1:threshold}, ${2:actual});",
            "trigger": "alti16\tassert less than int16"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT32(${1:threshold}, ${2:actual});",
            "trigger": "alti32\tassert less than int32"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT64(${1:threshold}, ${2:actual});",
            "trigger": "alti64\tassert less than int64"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT(${1:threshold}, ${2:actual});",
            "trigger": "altu\tassert less than uint"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "altu8\tassert less than uint8"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "altu16\tassert less than uint16"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "altu32\tassert less than uint32"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "altu64\tassert less than uint64"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_size_t(${1:threshold}, ${2:actual});",
            "trigger": "altsz\tassert less than size_t"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "alth8\tassert less than hex8"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "alth16\tassert less than hex16"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "alth32\tassert less than hex32"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "alth64\tassert less than hex64"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "altc\tassert less than char"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL(${1:threshold}, ${2:actual});",
            "trigger": "agoe\tassert greater or equal"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT(${1:threshold}, ${2:actual});",
            "trigger": "agoei\tassert greater or equal int"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT8(${1:threshold}, ${2:actual});",
            "trigger": "agoei8\tassert greater or equal int8"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT16(${1:threshold}, ${2:actual});",
            "trigger": "agoei16\tassert greater or equal int16"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT32(${1:threshold}, ${2:actual});",
            "trigger": "agoei32\tassert greater or equal int32"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT64(${1:threshold}, ${2:actual});",
            "trigger": "agoei64\tassert greater or equal int64"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT(${1:threshold}, ${2:actual});",
            "trigger": "agoeu\tassert greater or equal uint"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "agoeu8\tassert greater or equal uint8"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "agoeu16\tassert greater or equal uint16"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "agoeu32\tassert greater or equal uint32"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "agoeu64\tassert greater or equal uint64"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_size_t(${1:threshold}, ${2:actual});",
            "trigger": "agoesz\tassert greater or equal size_t"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "agoeh8\tassert greater or equal hex8"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "agoeh16\tassert greater or equal hex16"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "agoeh32\tassert greater or equal hex32"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "agoeh64\tassert greater or equal hex64"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "agoec\tassert greater or equal char"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL(${1:threshold}, ${2:actual});",
            "trigger": "aloe\tassert less or equal"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT(${1:threshold}, ${2:actual});",
            "trigger": "aloei\tassert less or equal int"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT8(${1:threshold}, ${2:actual});",
            "trigger": "aloei8\tassert less or equal int8"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT16(${1:threshold}, ${2:actual});",
            "trigger": "aloei16\tassert less or equal int16"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT32(${1:threshold}, ${2:actual});",
            "trigger": "aloei32\tassert less or equal int32"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT64(${1:threshold}, ${2:actual});",
            "trigger": "aloei64\tassert less or equal int64"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT(${1:threshold}, ${2:actual});",
            "trigger": "aloeu\tassert less or equal uint"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "aloeu8\tassert less or equal uint8"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "aloeu16\tassert less or equal uint16"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "aloeu32\tassert less or equal uint32"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "aloeu64\tassert less or equal uint64"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_size_t(${1:threshold}, ${2:actual});",
            "trigger": "aloesz\tassert less or equal size_t"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "aloeh8\tassert less or equal hex8"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "aloeh16\tassert less or equal hex16"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "aloeh32\tassert less or equal hex32"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "aloeh64\tassert less or equal hex64"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "aloec\tassert less or equal char"
        },
        {
            "contents": "TEST_ASSERT_INT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "aiw\tassert int within"
        },
        {
            "contents": "TEST_ASSERT_INT8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai8w\tassert int8 within"
        },
        {
            "contents": "TEST_ASSERT_INT16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai16w\tassert int16 within"
        },
        {
            "contents": "TEST_ASSERT_INT32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai32w\tassert int32 within"
        },
        {
            "contents": "TEST_ASSERT_INT64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai64w\tassert int64 within"
        },
        {
            "contents": "TEST_ASSERT_UINT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "auw\tassert uint within"
        },
        {
            "contents": "TEST_ASSERT_UINT8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au8w\tassert uint8 within"
        },
        {
            "contents": "TEST_ASSERT_UINT16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au16w\tassert uint16 within"
        },
        {
            "contents": "TEST_ASSERT_UINT32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au32w\tassert uint32 within"
        },
        {
            "contents": "TEST_ASSERT_UINT64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au64w\tassert uint64 within"
        },
        {
            "contents": "TEST_ASSERT_size_t_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "aszw\tassert size_t within"
        },
        {
            "contents": "TEST_ASSERT_HEX_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ahw\tassert hex within"
        },
        {
            "contents": "TEST_ASSERT_HEX8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah8w\tassert hex8 within"
        },
        {
            "contents": "TEST_ASSERT_HEX16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah16w\tassert hex16 within"
        },
        {
            "contents": "TEST_ASSERT_HEX32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah32w\tassert hex32 within"
        },
        {
            "contents": "TEST_ASSERT_HEX64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah64w\tassert hex64 within"
        },
        {
            "contents": "TEST_ASSERT_CHAR_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "acw\tassert char within"
        },
        {
            "contents": "TEST_ASSERT_INT_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "aiaw\tassert int array within"
        },
        {
            "contents": "TEST_ASSERT_INT8_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai8aw\tassert int8 array within"
        },
        {
            "contents": "TEST_ASSERT_INT16_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai16aw\tassert int16 array within"
        },
        {
            "contents": "TEST_ASSERT_INT32_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai32aw\tassert int32 array within"
        },
        {
            "contents": "TEST_ASSERT_INT64_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai64aw\tassert int64 array within"
        },
        {
            "contents": "TEST_ASSERT_UINT_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "auaw\tassert uint array within"
        },
        {
            "contents": "TEST_ASSERT_UINT8_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au8aw\tassert uint8 array within"
        },
        {
            "contents": "TEST_ASSERT_UINT16_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au16aw\tassert uint16 array within"
        },
        {
            "contents": "TEST_ASSERT_UINT32_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au32aw\tassert uint32 array within"
        },
        {
            "contents": "TEST_ASSERT_UINT64_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au64aw\tassert uint64 array within"
        },
        {
            "contents": "TEST_ASSERT_size_t_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "aszaw\tassert size_t array within"
        },
        {
            "contents": "TEST_ASSERT_HEX_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ahaw\tassert hex array within"
        },
        {
            "contents": "TEST_ASSERT_HEX8_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah8aw\tassert hex8 array within"
        },
        {
            "contents": "TEST_ASSERT_HEX16_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah16aw\tassert hex16 array within"
        },
        {
            "contents": "TEST_ASSERT_HEX32_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah32aw\tassert hex32 array within"
        },
        {
            "contents": "TEST_ASSERT_HEX64_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah64aw\tassert hex64 array within"
        },
        {
            "contents": "TEST_ASSERT_CHAR_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "acaw\tassert char array within"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_PTR(${1:expected}, ${2:actual});",
            "trigger": "aep\tassert equal ptr"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_STRING(${1:expected}, ${2:actual});",
            "trigger": "aes\tassert equal string"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_STRING_LEN(${1:expected}, ${2:actual}, ${3:len});",
            "trigger": "aesl\tassert equal string len"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_MEMORY(${1:expected}, ${2:actual}, ${3:len});",
            "trigger": "aem\tassert equal memory"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeia\tassert equal int array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei8a\tassert equal int8 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei16a\tassert equal int16 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei32a\tassert equal int32 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei64a\tassert equal int64 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeua\tassert equal uint array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu8a\tassert equal uint8 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu16a\tassert equal uint16 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu32a\tassert equal uint32 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu64a\tassert equal uint64 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_size_t_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aesza\tassert equal size_t array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeha\tassert equal hex array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh8a\tassert equal hex8 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh16a\tassert equal hex16 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh32a\tassert equal hex32 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh64a\tassert equal hex64 array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_PTR_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aepa\tassert equal ptr array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_STRING_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aesa\tassert equal string array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_MEMORY_ARRAY(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements});",
            "trigger": "aema\tassert equal memory array"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_CHAR_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeca\tassert equal char array"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei\tassert each equal int"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT8(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei8\tassert each equal int8"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT16(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei16\tassert each equal int16"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT32(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei32\tassert each equal int32"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT64(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei64\tassert each equal int64"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu\tassert each equal uint"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT8(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu8\tassert each equal uint8"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT16(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu16\tassert each equal uint16"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT32(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu32\tassert each equal uint32"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT64(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu64\tassert each equal uint64"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_size_t(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeesz\tassert each equal size_t"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh\tassert each equal hex"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX8(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh8\tassert each equal hex8"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX16(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh16\tassert each equal hex16"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX32(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh32\tassert each equal hex32"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX64(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh64\tassert each equal hex64"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_PTR(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeep\tassert each equal ptr"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_STRING(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aees\tassert each equal string"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_MEMORY(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements});",
            "trigger": "aeem\tassert each equal memory"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_CHAR(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeec\tassert each equal char"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "afw\tassert float within"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_NOT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "afnw\tassert float not within"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_FLOAT(${1:expected}, ${2:actual});",
            "trigger": "aef\tassert equal float"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_FLOAT(${1:expected}, ${2:actual});",
            "trigger": "anef\tassert not equal float"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_FLOAT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aefa\tassert equal float array"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_FLOAT(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeef\tassert each equal float"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "agtf\tassert greater than float"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "agoef\tassert greater or equal float"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "altf\tassert less than float"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "aloef\tassert less or equal float"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_INF(${1:actual});",
            "trigger": "afii\tassert float is inf"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NEG_INF(${1:actual});",
            "trigger": "afini\tassert float is neg inf"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NAN(${1:actual});",
            "trigger": "afin\tassert float is nan"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_DETERMINATE(${1:actual});",
            "trigger": "afid\tassert float is determinate"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_INF(${1:actual});",
            "trigger": "afini\tassert float is not inf"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NEG_INF(${1:actual});",
            "trigger": "afinni\tassert float is not neg inf"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NAN(${1:actual});",
            "trigger": "afinn\tassert float is not nan"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(${1:actual});",
            "trigger": "afind\tassert float is not determinate"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "adw\tassert double within"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_NOT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "adnw\tassert double not within"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_DOUBLE(${1:expected}, ${2:actual});",
            "trigger": "aed\tassert equal double"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_DOUBLE(${1:expected}, ${2:actual});",
            "trigger": "aned\tassert not equal double"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_DOUBLE_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeda\tassert equal double array"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_DOUBLE(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeed\tassert each equal double"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "agtd\tassert greater than double"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "agoed\tassert greater or equal double"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "altd\tassert less than double"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "aloed\tassert less or equal double"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_INF(${1:actual});",
            "trigger": "adii\tassert double is inf"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NEG_INF(${1:actual});",
            "trigger": "adini\tassert double is neg inf"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NAN(${1:actual});",
            "trigger": "adin\tassert double is nan"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_DETERMINATE(${1:actual});",
            "trigger": "adid\tassert double is determinate"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_INF(${1:actual});",
            "trigger": "adini\tassert double is not inf"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF(${1:actual});",
            "trigger": "adinni\tassert double is not neg inf"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NAN(${1:actual});",
            "trigger": "adinn\tassert double is not nan"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(${1:actual});",
            "trigger": "adind\tassert double is not determinate"
        },
        {
            "contents": "TEST_ASSERT_EQUAL(${1:expected}, ${2:actual});",
            "trigger": "ae\tassert equal"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL(${1:expected}, ${2:actual});",
            "trigger": "ane\tassert not equal"
        },
        {
            "contents": "TEST_ASSERT_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "asm\tassert message"
        },
        {
            "contents": "TEST_ASSERT_TRUE_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "atm\tassert true message"
        },
        {
            "contents": "TEST_ASSERT_UNLESS_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "aum\tassert unless message"
        },
        {
            "contents": "TEST_ASSERT_FALSE_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "afm\tassert false message"
        },
        {
            "contents": "TEST_ASSERT_NULL_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "anm\tassert null message"
        },
        {
            "contents": "TEST_ASSERT_NOT_NULL_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "annm\tassert not null message"
        },
        {
            "contents": "TEST_ASSERT_EMPTY_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "aem\tassert empty message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EMPTY_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "anem\tassert not empty message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeim\tassert equal int message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT8_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei8m\tassert equal int8 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT16_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei16m\tassert equal int16 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT32_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei32m\tassert equal int32 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT64_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei64m\tassert equal int64 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeum\tassert equal uint message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT8_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu8m\tassert equal uint8 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT16_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu16m\tassert equal uint16 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT32_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu32m\tassert equal uint32 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT64_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu64m\tassert equal uint64 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_size_t_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeszm\tassert equal size_t message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aehm\tassert equal hex message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX8_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh8m\tassert equal hex8 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX16_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh16m\tassert equal hex16 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX32_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh32m\tassert equal hex32 message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX64_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh64m\tassert equal hex64 message"
        },
        {
            "contents": "TEST_ASSERT_BITS_MESSAGE(${1:mask}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "abm\tassert bits message"
        },
        {
            "contents": "TEST_ASSERT_BITS_HIGH_MESSAGE(${1:mask}, ${2:actual}, \"${3:message}\");",
            "trigger": "abhm\tassert bits high message"
        },
        {
            "contents": "TEST_ASSERT_BITS_LOW_MESSAGE(${1:mask}, ${2:actual}, \"${3:message}\");",
            "trigger": "ablm\tassert bits low message"
        },
        {
            "contents": "TEST_ASSERT_BIT_HIGH_MESSAGE(${1:bit}, ${2:actual}, \"${3:message}\");",
            "trigger": "abhm\tassert bit high message"
        },
        {
            "contents": "TEST_ASSERT_BIT_LOW_MESSAGE(${1:bit}, ${2:actual}, \"${3:message}\");",
            "trigger": "ablm\tassert bit low message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_CHAR_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aecm\tassert equal char message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneim\tassert not equal int message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei8m\tassert not equal int8 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei16m\tassert not equal int16 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei32m\tassert not equal int32 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei64m\tassert not equal int64 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneum\tassert not equal uint message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu8m\tassert not equal uint8 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu16m\tassert not equal uint16 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu32m\tassert not equal uint32 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu64m\tassert not equal uint64 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneszm\tassert not equal size_t message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh8m\tassert not equal hex8 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh16m\tassert not equal hex16 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh32m\tassert not equal hex32 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh64m\tassert not equal hex64 message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anecm\tassert not equal char message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtm\tassert greater than message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtim\tassert greater than int message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti8m\tassert greater than int8 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti16m\tassert greater than int16 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti32m\tassert greater than int32 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti64m\tassert greater than int64 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtum\tassert greater than uint message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu8m\tassert greater than uint8 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu16m\tassert greater than uint16 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu32m\tassert greater than uint32 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu64m\tassert greater than uint64 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtszm\tassert greater than size_t message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth8m\tassert greater than hex8 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth16m\tassert greater than hex16 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth32m\tassert greater than hex32 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth64m\tassert greater than hex64 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtcm\tassert greater than char message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altm\tassert less than message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altim\tassert less than int message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti8m\tassert less than int8 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti16m\tassert less than int16 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti32m\tassert less than int32 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti64m\tassert less than int64 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altum\tassert less than uint message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu8m\tassert less than uint8 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu16m\tassert less than uint16 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu32m\tassert less than uint32 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu64m\tassert less than uint64 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altszm\tassert less than size_t message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth8m\tassert less than hex8 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth16m\tassert less than hex16 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth32m\tassert less than hex32 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth64m\tassert less than hex64 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altcm\tassert less than char message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoem\tassert greater or equal message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeim\tassert greater or equal int message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei8m\tassert greater or equal int8 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei16m\tassert greater or equal int16 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei32m\tassert greater or equal int32 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei64m\tassert greater or equal int64 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeum\tassert greater or equal uint message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu8m\tassert greater or equal uint8 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu16m\tassert greater or equal uint16 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu32m\tassert greater or equal uint32 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu64m\tassert greater or equal uint64 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeszm\tassert greater or equal size_t message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh8m\tassert greater or equal hex8 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh16m\tassert greater or equal hex16 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh32m\tassert greater or equal hex32 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh64m\tassert greater or equal hex64 message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoecm\tassert greater or equal char message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloem\tassert less or equal message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeim\tassert less or equal int message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei8m\tassert less or equal int8 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei16m\tassert less or equal int16 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei32m\tassert less or equal int32 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei64m\tassert less or equal int64 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeum\tassert less or equal uint message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu8m\tassert less or equal uint8 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu16m\tassert less or equal uint16 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu32m\tassert less or equal uint32 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu64m\tassert less or equal uint64 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeszm\tassert less or equal size_t message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh8m\tassert less or equal hex8 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh16m\tassert less or equal hex16 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh32m\tassert less or equal hex32 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh64m\tassert less or equal hex64 message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloecm\tassert less or equal char message"
        },
        {
            "contents": "TEST_ASSERT_INT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "aiwm\tassert int within message"
        },
        {
            "contents": "TEST_ASSERT_INT8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai8wm\tassert int8 within message"
        },
        {
            "contents": "TEST_ASSERT_INT16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai16wm\tassert int16 within message"
        },
        {
            "contents": "TEST_ASSERT_INT32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai32wm\tassert int32 within message"
        },
        {
            "contents": "TEST_ASSERT_INT64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai64wm\tassert int64 within message"
        },
        {
            "contents": "TEST_ASSERT_UINT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "auwm\tassert uint within message"
        },
        {
            "contents": "TEST_ASSERT_UINT8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au8wm\tassert uint8 within message"
        },
        {
            "contents": "TEST_ASSERT_UINT16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au16wm\tassert uint16 within message"
        },
        {
            "contents": "TEST_ASSERT_UINT32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au32wm\tassert uint32 within message"
        },
        {
            "contents": "TEST_ASSERT_UINT64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au64wm\tassert uint64 within message"
        },
        {
            "contents": "TEST_ASSERT_size_t_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "aszwm\tassert size_t within message"
        },
        {
            "contents": "TEST_ASSERT_HEX_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ahwm\tassert hex within message"
        },
        {
            "contents": "TEST_ASSERT_HEX8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah8wm\tassert hex8 within message"
        },
        {
            "contents": "TEST_ASSERT_HEX16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah16wm\tassert hex16 within message"
        },
        {
            "contents": "TEST_ASSERT_HEX32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah32wm\tassert hex32 within message"
        },
        {
            "contents": "TEST_ASSERT_HEX64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah64wm\tassert hex64 within message"
        },
        {
            "contents": "TEST_ASSERT_CHAR_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "acwm\tassert char within message"
        },
        {
            "contents": "TEST_ASSERT_INT_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aiawm\tassert int array within message"
        },
        {
            "contents": "TEST_ASSERT_INT8_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai8awm\tassert int8 array within message"
        },
        {
            "contents": "TEST_ASSERT_INT16_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai16awm\tassert int16 array within message"
        },
        {
            "contents": "TEST_ASSERT_INT32_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai32awm\tassert int32 array within message"
        },
        {
            "contents": "TEST_ASSERT_INT64_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai64awm\tassert int64 array within message"
        },
        {
            "contents": "TEST_ASSERT_UINT_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "auawm\tassert uint array within message"
        },
        {
            "contents": "TEST_ASSERT_UINT8_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au8awm\tassert uint8 array within message"
        },
        {
            "contents": "TEST_ASSERT_UINT16_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au16awm\tassert uint16 array within message"
        },
        {
            "contents": "TEST_ASSERT_UINT32_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au32awm\tassert uint32 array within message"
        },
        {
            "contents": "TEST_ASSERT_UINT64_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au64awm\tassert uint64 array within message"
        },
        {
            "contents": "TEST_ASSERT_size_t_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aszawm\tassert size_t array within message"
        },
        {
            "contents": "TEST_ASSERT_HEX_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ahawm\tassert hex array within message"
        },
        {
            "contents": "TEST_ASSERT_HEX8_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah8awm\tassert hex8 array within message"
        },
        {
            "contents": "TEST_ASSERT_HEX16_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah16awm\tassert hex16 array within message"
        },
        {
            "contents": "TEST_ASSERT_HEX32_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah32awm\tassert hex32 array within message"
        },
        {
            "contents": "TEST_ASSERT_HEX64_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah64awm\tassert hex64 array within message"
        },
        {
            "contents": "TEST_ASSERT_CHAR_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "acawm\tassert char array within message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_PTR_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aepm\tassert equal ptr message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_STRING_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aesm\tassert equal string message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, \"${4:message}\");",
            "trigger": "aeslm\tassert equal string len message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_MEMORY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, \"${4:message}\");",
            "trigger": "aemm\tassert equal memory message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeiam\tassert equal int array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei8am\tassert equal int8 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei16am\tassert equal int16 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei32am\tassert equal int32 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei64am\tassert equal int64 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeuam\tassert equal uint array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu8am\tassert equal uint8 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu16am\tassert equal uint16 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu32am\tassert equal uint32 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu64am\tassert equal uint64 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_size_t_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeszam\tassert equal size_t array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeham\tassert equal hex array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh8am\tassert equal hex8 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh16am\tassert equal hex16 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh32am\tassert equal hex32 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh64am\tassert equal hex64 array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aepam\tassert equal ptr array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aesam\tassert equal string array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aemam\tassert equal memory array message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_CHAR_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aecam\tassert equal char array message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeim\tassert each equal int message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT8_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei8m\tassert each equal int8 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT16_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei16m\tassert each equal int16 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT32_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei32m\tassert each equal int32 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_INT64_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei64m\tassert each equal int64 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeum\tassert each equal uint message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT8_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu8m\tassert each equal uint8 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT16_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu16m\tassert each equal uint16 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT32_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu32m\tassert each equal uint32 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT64_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu64m\tassert each equal uint64 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_size_t_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeszm\tassert each equal size_t message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeehm\tassert each equal hex message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX8_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh8m\tassert each equal hex8 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX16_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh16m\tassert each equal hex16 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX32_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh32m\tassert each equal hex32 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX64_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh64m\tassert each equal hex64 message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_PTR_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeepm\tassert each equal ptr message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_STRING_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeesm\tassert each equal string message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_MEMORY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aeemm\tassert each equal memory message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_CHAR_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeecm\tassert each equal char message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "afwm\tassert float within message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aefm\tassert equal float message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anefm\tassert not equal float message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aefam\tassert equal float array message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeefm\tassert each equal float message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtfm\tassert greater than float message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoefm\tassert greater or equal float message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altfm\tassert less than float message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloefm\tassert less or equal float message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afiim\tassert float is inf message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinim\tassert float is neg inf message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinm\tassert float is nan message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afidm\tassert float is determinate message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinim\tassert float is not inf message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinnim\tassert float is not neg inf message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinnm\tassert float is not nan message"
        },
        {
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afindm\tassert float is not determinate message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "adwm\tassert double within message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aedm\tassert equal double message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anedm\tassert not equal double message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aedam\tassert equal double array message"
        },
        {
            "contents": "TEST_ASSERT_EACH_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeedm\tassert each equal double message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_THAN_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtdm\tassert greater than double message"
        },
        {
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoedm\tassert greater or equal double message"
        },
        {
            "contents": "TEST_ASSERT_LESS_THAN_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altdm\tassert less than double message"
        },
        {
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloedm\tassert less or equal double message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adiim\tassert double is inf message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinim\tassert double is neg inf message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinm\tassert double is nan message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adidm\tassert double is determinate message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinim\tassert double is not inf message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinnim\tassert double is not neg inf message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinnm\tassert double is not nan message"
        },
        {
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adindm\tassert double is not determinate message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aem\tassert equal message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anem\tassert not equal message"
        },
        {
            "contents": "TEST_ASSERT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aem\tassert equal message"
        },
        {
            "contents": "TEST_ASSERT_NOT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anem\tassert not equal message"
        }
    ],
    "scope": "(source.c | source.c++ | source.c99) (meta.function & meta.block)"
}