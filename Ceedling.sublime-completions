{
    "scope": "source.c,source.c++",
    "completions":
    [
        {
            "annotation": "CMock _Expect(void)",
            "contents": "${1:function}_Expect(void)",
            "kind": "snippet",
            "trigger": "mev"
        },
        {
            "annotation": "CMock _Expect(params)",
            "contents": "${1:function}_Expect(${2:expected_params})",
            "kind": "snippet",
            "trigger": "mep"
        },

        {   "annotation": "CMock _Expect(retval)",
            "contents": "${1:function}_ExpectAndReturn(${2:retval_to_return})",
            "kind": "snippet",
            "trigger": "mer"
        },
        {   "annotation": "CMock _Expect(params, retval)",
            "contents": "${1:function}_ExpectAndReturn(${2:expected_params}, ${3:retval_to_return})",
            "kind": "snippet",
            "trigger": "mepr"
        },
        {
            "annotation": "assert equal int",
            "contents": "TEST_ASSERT_EQUAL_INT(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aei"
        },
        {
            "annotation": "assert equal int message",
            "contents": "TEST_ASSERT_EQUAL_INT_MESSAGE(${1:expected}, ${2:actual}, ${3:message});",
            "kind": "snippet",
            "trigger": "aeim"
        },
        {
            "annotation": "assert equal hex",
            "contents": "TEST_ASSERT_EQUAL_HEX(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aeh"
        },
        {
            "annotation": "assert equal hex message",
            "contents": "TEST_ASSERT_EQUAL_HEX_MESSAGE(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aehm"
        },
        {
            "annotation": "assert equal hex8",
            "contents": "TEST_ASSERT_EQUAL_HEX8(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aeh8"
        },
        {
            "annotation": "assert equal hex8 message",
            "contents": "TEST_ASSERT_EQUAL_HEX8_MESSAGE(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aeh8m"
        },
        {
            "annotation": "assert equal hex16",
            "contents": "TEST_ASSERT_EQUAL_HEX16(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aeh16"
        },
        {
            "annotation": "assert equal hex16 message",
            "contents": "TEST_ASSERT_EQUAL_HEX16_MESSAGE(${1:expected}, ${2:actual});",
            "kind": "snippet",
            "trigger": "aeh16m"
        },
        {
            "annotation": "assert true",
            "contents": "TEST_ASSERT_TRUE(${1:expression});",
            "kind": "snippet",
            "trigger": "at"
        },
        {
            "annotation": "assert true message",
            "contents": "TEST_ASSERT_TRUE_MESSAGE(${1:expression}, ${2:message});",
            "kind": "snippet",
            "trigger": "atm"
        },
        {
            "annotation": "assert false",
            "contents": "TEST_ASSERT_FALSE(${1:expression});",
            "kind": "snippet",
            "trigger": "af"
        },
        {
            "annotation": "assert false message",
            "contents": "TEST_ASSERT_FALSE_MESSAGE(${1:expression}, ${2:message});",
            "kind": "snippet",
            "trigger": "afm"
        },
        {
            "annotation": "assert equal memory",
            "contents": "TEST_ASSERT_EQUAL_MEMORY(${1:expected}, ${2:actual}, ${3:length});",
            "kind": "snippet",
            "trigger": "aem"
        },
        {
            "annotation": "assert equal memory message",
            "contents": "TEST_ASSERT_EQUAL_MEMORY_MESSAGE(${1:expected}, ${2:actual}, ${3:length}, ${4:message});",
            "kind": "snippet",
            "trigger": "amm"
        },
        {
            "annotation": "fail",
            "contents": "TEST_FAIL();",
            "kind": "snippet",
            "trigger": "fa"
        },
        {
            "annotation": "fail message",
            "contents": "TEST_FAIL_MESSAGE(\"${1:message}\");",
            "kind": "snippet",
            "trigger": "fam"
        },
        {
            "annotation": "ignore",
            "contents": "TEST_IGNORE();",
            "kind": "snippet",
            "trigger": "ig"
        },
        {
            "annotation": "ignore message",
            "contents": "TEST_IGNORE_MESSAGE(\"${1:message}\");",
            "kind": "snippet",
            "trigger": "igm"
        },
        {
            "annotation": "assert message",
            "contents": "TEST_ASSERT_MESSAGE(${1:test},\"${2:message}\");",
            "kind": "snippet",
            "trigger": "amtm"
        },
        {
            "annotation": "test skeleton",
            "contents": "void test_${1:function}_should_${2:behavior}(void)\n{\n\t${3}\n}\n",
            "kind": "function",
            "trigger": "test"
        },
        {
            "annotation": "test skeleton fail",
            "contents": "void test_${1:function}_should_${2:behavior}(void)\n{\n\tTEST_FAIL_MESSAGE(\"${3:Implement me!}\");\n}\n",
            "kind": "function",
            "trigger": "testf"
        },
        {
            "annotation": "test skeleton ignore",
            "contents": "void test_${1:function}_should_${2:behavior}(void)\n{\n\tTEST_IGNORE_MESSAGE(\"${3:Implement me!}\");\n}\n",
            "kind": "function",
            "trigger": "testi"
        }
    ]
}
